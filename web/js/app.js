// Generated by CoffeeScript 1.4.0
"use strict";

var Chapter, PageCtrl, PageList, Series, app,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

app = angular.module('flow', ['ui']);

app.config(function($interpolateProvider) {
  $interpolateProvider.startSymbol('{[');
  return $interpolateProvider.endSymbol(']}');
});

app.run(function($rootScope) {
  return $(function() {
    return $('body').removeClass('no-js').addClass('js');
  });
});

Chapter = (function() {

  function Chapter(prototype) {
    this.__proto__ = prototype;
  }

  return Chapter;

})();

Series = (function() {

  function Series(prototype) {
    this.__proto__ = prototype;
  }

  return Series;

})();

PageList = (function() {
  var _ref;

  PageList._pageNoRegex = /\/(\d+)\/?$/;

  PageList.prototype._currentPage = parseInt(((_ref = document.location.pathname.match(PageList._pageNoRegex)) != null ? _ref[1] : void 0) - 1);

  function PageList(list) {
    this.prevPage = __bind(this.prevPage, this);

    this.nextPage = __bind(this.nextPage, this);

    this.setPage = __bind(this.setPage, this);

    this.getPage = __bind(this.getPage, this);

    this.getCurrent = __bind(this.getCurrent, this);
    this.list = list;
  }

  PageList.prototype.getCurrent = function() {
    return this.list[this._currentPage];
  };

  PageList.prototype.getPage = function(id) {
    return this.list[id];
  };

  PageList.prototype.setPage = function(id) {
    this._currentPage = id;
    return this;
  };

  PageList.prototype.nextPage = function() {
    this._currentPage++;
    return this.getCurrent();
  };

  PageList.prototype.prevPage = function() {
    this._currentPage--;
    return this.getCurrent();
  };

  return PageList;

})();

PageCtrl = (function() {

  function PageCtrl($scope, $rootScope, $http) {
    $scope.url = document.location.pathname;
    $http.get($scope.url).success(function(data, status, headers, config) {
      $scope.chapter = new Chapter(data.chapter);
      $scope.series = new Series(data.series);
      $scope.pages = new PageList(data.pages);
      $scope.page = $scope.pages.getCurrent();
      return $scope.$watch('pages._currentPage', function() {
        var _ref;
        return $scope.page = (_ref = $scope.pages) != null ? _ref.getCurrent() : void 0;
      });
    });
    $scope.nextPage = function($event) {
      $event.preventDefault();
      return $scope.pages.nextPage();
    };
    $scope.prevPage = function($event) {
      $event.preventDefault();
      return $scope.pages.prevPage();
    };
  }

  return PageCtrl;

})();
